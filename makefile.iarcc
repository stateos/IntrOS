#**********************************************************#
#file     makefile
#author   Rajmund Szymanski
#date     16.02.2021
#brief    STM32F4xx makefile.
#**********************************************************#

IARCC      := C:/Sys/icc/arm/bin/
GNUCC      := C:/Sys/gcc/arm/bin/arm-none-eabi-
OPENOCD    := C:/Sys/tools/openocd/bin/openocd
STLINK     := C:/Sys/tools/st-link/st-link_cli -Q -c SWD UR
CUBE       := C:/Sys/tools/cube/stm32_programmer_cli -q -c port=SWD mode=UR
QEMU       := C:/Sys/qemu-arm/bin/qemu-system-gnuarmeclipse -semihosting -board STM32F4-Discovery

#----------------------------------------------------------#

PROJECT    ?=
DEFS       ?= DEBUG USE_SEMIHOST
DIRS       ?=
INCS       ?=
LIBS       ?=
KEYS       ?=
OPTF       ?=
SCRIPT     ?=

#----------------------------------------------------------#

DEFS       += STM32F407xx __ARM__
KEYS       += .iarcc .cortexm .stm32f4 *

#----------------------------------------------------------#

AS         := $(IARCC)iasmarm
CC         := $(IARCC)iccarm
CXX        := $(IARCC)iccarm
COPY       := $(IARCC)ielftool
DUMP       := $(GNUCC)objdump
SIZE       := $(GNUCC)size
LD         := $(IARCC)ilinkarm
AR         := $(IARCC)iarchive
GDB        := $(GNUCC)gdb

RM         ?= rm -f

#----------------------------------------------------------#

DTREE       = $(foreach d,$(foreach k,$(KEYS),$(wildcard $1$k)),$(dir $d) $(call DTREE,$d/))

VPATH      := $(sort $(call DTREE,) $(foreach d,$(DIRS),$(call DTREE,$d/)))

#----------------------------------------------------------#

AS_EXT     := .s
C_EXT      := .c
CXX_EXT    := .cpp

INC_DIRS   := $(sort $(dir $(foreach d,$(VPATH),$(wildcard $d*.h $d*.hpp))))
LIB_DIRS   := $(sort $(dir $(foreach d,$(VPATH),$(wildcard $dlib*.a))))
OBJ_SRCS   :=              $(foreach d,$(VPATH),$(wildcard $d*.o))
AS_SRCS    :=              $(foreach d,$(VPATH),$(wildcard $d*$(AS_EXT)))
C_SRCS     :=              $(foreach d,$(VPATH),$(wildcard $d*$(C_EXT)))
CXX_SRCS   :=              $(foreach d,$(VPATH),$(wildcard $d*$(CXX_EXT)))
LIB_SRCS   :=     $(notdir $(foreach d,$(VPATH),$(wildcard $dlib*.a)))
ifeq ($(strip $(SCRIPT)),)
SCRIPT     :=  $(firstword $(foreach d,$(VPATH),$(wildcard $d*.icf)))
else
SCRIPT     :=  $(firstword $(foreach d,$(VPATH),$(wildcard $d$(SCRIPT))))
endif
ifeq ($(strip $(PROJECT)),)
PROJECT    := $(firstword $(notdir $(CURDIR)))
endif

AS_SRCS    := $(AS_SRCS:%.S=)

#----------------------------------------------------------#

BIN        := $(PROJECT).bin
ELF        := $(PROJECT).elf
HEX        := $(PROJECT).hex
LIB        := lib$(PROJECT).a
LSS        := $(PROJECT).lss
MAP        := $(PROJECT).map

OBJS       := $(AS_SRCS:%$(AS_EXT)=%.o)
OBJS       += $(C_SRCS:%$(C_EXT)=%.o)
OBJS       += $(CXX_SRCS:%$(CXX_EXT)=%.o)
DEPS       := $(OBJS:.o=.d)
LSTS       := $(OBJS:.o=.lst)

#----------------------------------------------------------#

CORE_F     := --cpu cortex-m4
CORE_F     += $(if $(filter qemu,$(MAKECMDGOALS)),,--fpu vfpv4_sp)

COMMON_F    = --thumb -O$(OPTF) -e --dependencies=m $*.d

AS_FLAGS    = -S -s+ -w+
C_FLAGS     = --silent
CXX_FLAGS   = --silent --c++ --enable_restrict --no_rtti --no_exceptions
LD_FLAGS    = --silent --config $(SCRIPT) --map $(MAP) --no_exceptions
ifneq ($(filter main_stack_size%,$(DEFS)),)
LD_FLAGS   += --config_def $(filter main_stack_size%,$(DEFS))
endif
ifneq ($(filter proc_stack_size%,$(DEFS)),)
LD_FLAGS   += --config_def $(filter proc_stack_size%,$(DEFS))
endif

#----------------------------------------------------------#

ifneq ($(filter USE_SEMIHOST,$(DEFS)),)
LD_FLAGS   += --semihosting
endif
ifneq ($(filter DEBUG,$(DEFS)),)
COMMON_F   += --debug
else
ifeq  ($(filter NDEBUG,$(DEFS)),)
DEFS       += NDEBUG
endif
endif

#----------------------------------------------------------#

DEFS_F     := $(DEFS:%=-D%)
LIBS       += $(LIB_SRCS:lib%.a=%)
LIBS_F     := $(LIBS:%=-l%)
OBJS_ALL   := $(sort $(OBJ_SRCS) $(OBJS))
INC_DIRS   += $(INCS:%=%/)
INC_DIRS_F := $(INC_DIRS:%=-I%)
LIB_DIRS_F := $(LIB_DIRS:%=-L%)

AS_FLAGS   += $(CORE_F)             $(DEFS_F) $(INC_DIRS_F)
C_FLAGS    += $(CORE_F) $(COMMON_F) $(DEFS_F) $(INC_DIRS_F)
CXX_FLAGS  += $(CORE_F) $(COMMON_F) $(DEFS_F) $(INC_DIRS_F)
LD_FLAGS   += $(CORE_F)

#----------------------------------------------------------#

#openocd command-line
#interface and board/target settings (using the OOCD target-library here)
OOCD_INIT  := -f board/stm32f4discovery.cfg
OOCD_INIT  += -c init
OOCD_INIT  += -c targets
#commands to enable semihosting
OOCD_DEBG  := -c "arm semihosting enable"
#commands to prepare flash-write
OOCD_SAVE  := -c "reset halt"
#flash-write and -verify
OOCD_SAVE  += -c "flash write_image erase $(ELF)"
OOCD_SAVE  += -c "verify_image $(ELF)"
#reset target
OOCD_EXEC  := -c "reset run"
#terminate OOCD after programming
OOCD_EXIT  := -c shutdown

#gdb command line
DEBUG_CMD  := -ex "target remote localhost:3333"
DEBUG_CMD  += -ex "mon reset halt"
DEBUG_CMD  += -ex "tbreak main"
DEBUG_CMD  += -ex "c"

#----------------------------------------------------------#

all : $(LSS) print_elf_size

lib : $(LIB) print_size

$(ELF) : $(OBJS_ALL) $(SCRIPT)
	$(info Linking target: $(ELF))
ifeq ($(strip $(SCRIPT)),)
	$(error No linker script in project)
endif
	$(LD) $(LD_FLAGS) $(OBJS_ALL) $(LIBS_F) $(LIB_DIRS_F) -o $@

$(LIB) : $(OBJS_ALL)
	$(info Building library: $(LIB))
	$(AR) --create $@ $?

$(OBJS) : $(MAKEFILE_LIST)

%.o : %$(AS_EXT)
	$(info Assembling file: $<)
	$(AS) $(AS_FLAGS) -c $< -o $@

%.o : %$(C_EXT)
	$(info Compiling file: $<)
	$(CC) $(C_FLAGS) -c $< -o $@

%.o : %$(CXX_EXT)
	$(info Compiling file: $<)
	$(CXX) $(CXX_FLAGS) -c $< -o $@

$(BIN) : $(ELF)
	$(info Creating BIN image: $(BIN))
#	$(COPY) -O binary $< $@
	$(COPY) --silent --strip --bin $^ $@

$(HEX) : $(ELF)
	$(info Creating HEX image: $(HEX))
#	$(COPY) -O ihex $< $@
	$(COPY) --silent --strip --ihex $^ $@

$(LSS) : $(ELF)
	$(info Creating extended listing: $(LSS))
	$(DUMP) --demangle -S $< > $@

print_size : $(OBJS_ALL)
	$(info Size of modules:)
	$(SIZE) -B -t --common $(OBJS_ALL)

print_elf_size : $(ELF)
	$(info Size of target file:)
	$(SIZE) -B $(ELF)

GENERATED = $(BIN) $(ELF) $(HEX) $(LIB) $(LSS) $(MAP) $(DEPS) $(LSTS) $(OBJS)

clean :
	$(info Removing all generated output files)
	$(RM) $(GENERATED)

flash : all $(HEX)
	$(info Programing device...)
	$(OPENOCD) $(OOCD_INIT) $(OOCD_SAVE) $(OOCD_EXEC) $(OOCD_EXIT)
#	$(CUBE) -w $(ELF) -v -hardRst
#	$(STLINK) -P $(HEX) -V -Rst

server : all
	$(info Starting server...)
	$(OPENOCD) $(OOCD_INIT) $(OOCD_SAVE)

debug : all
	$(info Debugging device...)
	$(GDB) --nx $(DEBUG_CMD) $(ELF)

monitor : all
	$(info Monitoring device...)
	$(OPENOCD) $(OOCD_INIT) $(OOCD_SAVE) $(OOCD_DEBG) $(OOCD_EXEC)

qemu : all
	$(info Emulating device...)
	$(QEMU) -image $(ELF)

reset :
	$(info Reseting device...)
	$(OPENOCD) $(OOCD_INIT) $(OOCD_EXEC) $(OOCD_EXIT)
#	$(CUBE) -hardRst
#	$(STLINK) -HardRst

.PHONY : all lib clean flash server debug monitor qemu reset

-include $(DEPS)
